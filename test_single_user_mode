# SPDX-License-Identifier:Â MIT

#!/bin/bash

##################################### TMP; will be configured elsewhere
PIN_ADMIN="1010"
PIN_USER="1111"

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'
#####################################

rm info.json
source source/lr_misc
source source/info_misc

LOGDIR=log
LOGDIR_ME=${LOGDIR}/${DEV_ID}_test_single_user_mode_$(date "+%F_%T")
[ -z "$DEV_ID" ] && LOGDIR_ME=${LOGDIR}/test_single_user_mode_$(date "+%F_%T")

PATTERN_FILE=${LOGDIR_ME}/pattern.img
UNLOCKED_PATTERN_FILE=${LOGDIR_ME}/unlocked_pattern.img
LOCKED_UNLOCKED_PATTERN_FILE=${LOGDIR_ME}/locked_unlocked_pattern.img


function sum_lr_def()
{
    local LR_START=$1
    local LR_LENGTH=$2
    local LR_ID=$3

    printf "\n[SINGLE USER MODE LR DEF] LR ${LR_ID}, LR start: ${LR_START}, LR length: ${LR_LENGTH}\n"
    DEV=$DEV USER_VERIFY_PIN=$PIN_USER LR_ID=$LR_ID USER_ID=$USER_ID LR_START=$LR_START LR_LENGTH=$LR_LENGTH ./set_locking_range_sum -q || return 1
    check_lr_properties $LR_ID $LR_START $LR_LENGTH "no" "no" "yes" "yes" user || return 1
    printf "[SINGLE USER MODE LR DEF] LR ${LR_ID}: OK\n"
}

utils/update_submodules || exit 1

[ -z "$CONTROL_PATH" ] && CONTROL_PATH="opal-toolset"
CONTROL=$CONTROL_PATH/control
[ ! -f "$CONTROL" ] && printf "Invalid path $CONTROL.\n" && exit 1

[ -z "$DEV" ] && printf "WARNING: variable DEV must be defined (partition or block device), test skipped\n" && exit 1
[ -z "$PSID" ] && printf "WARNING: variable PSID must be defined, test skipped\n" && exit 1

SUM_SUPPORTED=$(get_info_value '"single user mode"')
[ ! $? -eq 0 ] && printf "WARNING: could not resolve SUM support, test skipped\n" && exit 1
if [ "$SUM_SUPPORTED" != "supported" ]; then
    printf "WARNING: SUM feature is not supported by ${DEV}, test skipped\n"
    exit 1
fi

[ -z "$BS" ] && BS=512
[ -z "$LR_ID" ] && LR_ID=1
[ -z "$USER_ID" ] && USER_ID=2

[ ! -e $LOGDIR ] && mkdir $LOGDIR
[ ! -e $LOGDIR_ME ] && mkdir $LOGDIR_ME

# SETUP
#______________________________________________________________________________

# PSID reset
DEV=$DEV PSID=$PSID ./psid_reset -q || exit 1

# Set admin
DEV=$DEV ADMIN_PIN=$PIN_ADMIN ./set_admin_pin_sum -q || exit 1

# Set user
DEV=$DEV ADMIN_VERIFY_PIN=$PIN_ADMIN USER_ASSIGN_PIN=$PIN_USER USER_ID=$USER_ID ./set_user_sum -q || exit 1

# Prepare a reference file with a random pattern
rm $PATTERN_FILE 2>/dev/null
sudo dd if=/dev/random of=$PATTERN_FILE bs=$BS count=3 status=none


# DEFINE SUM LR
#______________________________________________________________________________
printf "\n[BASIC SUM LOCKING RANGE DEFINITION]\n"

LR_START=$BS
LR_LENGTH=$(($BS * 3))

sum_lr_def $LR_START $LR_LENGTH $LR_ID || {
    printf "${RED}[FATAL] basic definition of a locking range failed, other tests are skipped${NC}\n"
    exit 1
}

printf "\n${GREEN}[BASIC SUM LOCKING RANGE DEFINITION] OK${NC}\n"

# DATA INTEGRITY
#______________________________________________________________________________
printf "\n[DATA INTEGRITY]\n"
DATA_INTEGRITY_VIOLATION=false

if check_lock_unlock_data_integrity $LR_START $LR_LENGTH $LR_ID $PATTERN_FILE; then
    printf "\n${GREEN}[DATA INTEGRITY] OK${NC}\n"
else
    DATA_INTEGRITY_VIOLATION=true
    printf "${RED}[DATA INTEGRITY] NOK\n"
    printf "compare pattern written onto drive in ${PATTERN_FILE} and patterns"
    printf "obtained from drive in ${UNLOCKED_PATTERN_FILE}, ${LOCKED_UNLOCKED_PATTERN_FILE}${NC}\n"
fi

# SUM ACCESS CONTROL
#______________________________________________________________________________
printf "\n[SUM ACCESS CONTROL]\n"
ACCESS_CONTROL_VIOLATION=false

# Try to lock LR by admin, should fail
set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 1 1 admin \
    2>/dev/null \
    && printf "\n${RED}[FATAL]: admin locked a Single User Mode LR${NC}\n" \
    && ACCESS_CONTROL_VIOLATION=true

# Lock LR by user
[ $ACCESS_CONTROL_VIOLATION != "true" ] && set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 1 1 user \
    || {
        printf "\n${RED}[FATAL]: failed to lock LR by user when it should be possible${NC}\n"
        ACCESS_CONTROL_VIOLATION=true
}

# Try to unlock LR by admin, should fail
[ $ACCESS_CONTROL_VIOLATION != "true" ] && set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 0 0 admin \
    2>/dev/null \
    && printf "\n${RED}[FATAL]: admin unlocked a Single User Mode LR${NC}\n" \
    && ACCESS_CONTROL_VIOLATION=true

if [ $ACCESS_CONTROL_VIOLATION == "false" ]; then printf "\n${GREEN}[SUM ACCESS CONTROL] OK${NC}\n"; else printf "\n${RED}[SUM ACCESS CONTROL] NOK${NC}\n"; fi

# REACTIVATE
#______________________________________________________________________________
printf "\n[REACTIVATE]\n"
REACTIVATE_FAILURE=false

# Lock LR by user
set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 1 1 user \
    || {
        printf "\n${RED}[FATAL]: failed to lock LR by user when it should be possible${NC}\n"
        REACTIVATE_FAILURE=true
}

# Disable LR locking
printf "\n[DISABLE LR LOCKING] LR ${LR_ID}\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_enable_range $DEV \
        --locking-range $LR_ID \
        --read-lock-enabled 0 \
        --write-lock-enabled 0 \
        --user $USER_ID \
        --verify-pin $PIN_USER \
        || {
            printf "\n${RED}[WARNING]: failed to disable LR locking${NC}\n"
            REACTIVATE_FAILURE=true
    }
    check_lr_properties $LR_ID $LR_START $LR_LENGTH "yes" "yes" "no" "no" user || REACTIVATE_FAILURE=true
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[DISABLE LR LOCKING] OK\n"; else printf "\n${RED}[DISABLE LR LOCKING] NOK${NC}\n"; fi

# Reactivate without SUM
printf "\n[REACTIVATE NO SUM] LR ${LR_ID}\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_reactivate $DEV \
        --locking-range $LR_ID \
        --verify-pin $PIN_ADMIN \
        || {
            printf "\n${RED}[WARNING]: failed to reactivate with SUM disabled${NC}\n"
            REACTIVATE_FAILURE=true
    }
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[REACTIVATE NO SUM] OK\n"; else printf "\n${RED}[REACTIVATE NO SUM] NOK${NC}\n"; fi

# Allow access of user to the LR explicitly as it might be lost after reactivate
if [ $REACTIVATE_FAILURE != "true" ]; then
    DEV=$DEV USER_ID=$USER_ID LR_ID=$LR_ID ADMIN_VERIFY_PIN=$PIN_ADMIN ./add_user_lr -q || REACTIVATE_FAILURE=true
fi

# Enable LR locking
printf "\n[ENABLE LR LOCKING] LR ${LR_ID}\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_enable_range $DEV \
        --locking-range $LR_ID \
        --read-lock-enabled 1 \
        --write-lock-enabled 1 \
        --admin 1 \
        --verify-pin $PIN_ADMIN \
        || {
            printf "\n${RED}[WARNING]: failed to enable LR locking${NC}\n"
            REACTIVATE_FAILURE=true
    }
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[ENABLE LR LOCKING] OK\n"; else printf "\n${RED}[ENABLE LR LOCKING] NOK${NC}\n"; fi

# Try to unlock LR by admin, should succeed
if [ $REACTIVATE_FAILURE != "true" ]; then
    set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 0 0 admin \
        || {
            printf "\n${RED}[FATAL]: failed to unlock LR by admin when it should be possible${NC}\n"
            REACTIVATE_FAILURE=true
    }
fi

# Try to lock LR by admin, should succeed
if [ $REACTIVATE_FAILURE != "true" ]; then
    set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 1 1 admin \
        || {
            printf "\n${RED}[FATAL]: failed to lock LR by admin when it should be possible${NC}\n"
            REACTIVATE_FAILURE=true
    }
fi

# Disable LR locking
printf "\n[DISABLE LR LOCKING] LR ${LR_ID}\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_enable_range $DEV \
        --locking-range $LR_ID \
        --read-lock-enabled 0 \
        --write-lock-enabled 0 \
        --admin 1 \
        --verify-pin $PIN_ADMIN \
        || {
            printf "\n${RED}[WARNING]: failed to disable LR locking${NC}\n"
            REACTIVATE_FAILURE=true
    }
    check_lr_properties $LR_ID $LR_START $LR_LENGTH "yes" "yes" "no" "no" admin || REACTIVATE_FAILURE=true
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[DISABLE LR LOCKING] OK\n"; else printf "\n${RED}[DISABLE LR LOCKING] NOK${NC}\n"; fi

# Reactivate into SUM
printf "\n[REACTIVATE SUM] LR ${LR_ID}\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_reactivate $DEV \
        --locking-range $LR_ID \
        --verify-pin $PIN_ADMIN \
        --sum \
        || {
            printf "\n${RED}[WARNING]: failed to reactivate into SUM${NC}\n"
            REACTIVATE_FAILURE=true
    }
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[REACTIVATE SUM] OK\n"; else printf "\n${RED}[REACTIVATE SUM] NOK${NC}\n"; fi

# Reset user password into original
printf "\n[RESET USER PASSWORD]\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_password $DEV \
        --user $USER_ID \
        --verify-pin "" \
        --user $USER_ID \
        --assign-pin $PIN_USER \
        --sum \
        || {
            printf "\n${RED}[WARNING]: failed to reset user password${NC}\n"
            REACTIVATE_FAILURE=true
    }
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[RESET USER PASSWORD] OK\n"; else printf "\n${RED}[RESET USER PASSWORD] NOK${NC}\n"; fi

# Enable LR locking
printf "\n[ENABLE LR LOCKING] LR ${LR_ID}\n"
if [ $REACTIVATE_FAILURE != "true" ]; then
    $CONTROL setup_enable_range $DEV \
        --locking-range $LR_ID \
        --read-lock-enabled 1 \
        --write-lock-enabled 1 \
        --user $USER_ID \
        --verify-pin $PIN_USER \
        || {
            printf "\n${RED}[WARNING]: failed to enable LR locking${NC}\n"
            REACTIVATE_FAILURE=true
    }
    check_lr_properties $LR_ID $LR_START $LR_LENGTH "no" "no" "yes" "yes" user || REACTIVATE_FAILURE=true
fi
if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n[ENABLE LR LOCKING] OK\n"; else printf "\n${RED}[ENABLE LR LOCKING] NOK${NC}\n"; fi

printf "\n[REACTIVATE SUM ACCESS CONTROL]\n"

# Try to lock LR by admin, should fail
set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 1 1 admin \
    2>/dev/null \
    && printf "\n${RED}[FATAL]: admin locked a reactivated Single User Mode LR${NC}\n" \
    && REACTIVATE_FAILURE=true

# Lock LR by user
[ $ACCESS_CONTROL_VIOLATION != "true" ] && set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 1 1 user \
    || {
        printf "\n${RED}[FATAL]: failed to lock LR by user when it should be possible${NC}\n"
        REACTIVATE_FAILURE=true
}

# Try to unlock LR by admin, should fail
[ $ACCESS_CONTROL_VIOLATION != "true" ] && set_read_write_permissions $LR_ID $LR_START $LR_LENGTH 0 0 admin \
    2>/dev/null \
    && printf "\n${RED}[FATAL]: admin unlocked a reactivated Single User Mode LR${NC}\n" \
    && REACTIVATE_FAILURE=true

if [ $REACTIVATE_FAILURE == "false" ]; then printf "\n${GREEN}[REACTIVATE] OK${NC}\n"; else printf "\n${RED}[REACTIVATE] NOK${NC}\n"; fi

# OVERALL
#______________________________________________________________________________
if ! $DATA_INTEGRITY_VIOLATION \
    && ! $ACCESS_CONTROL_VIOLATION \
    && ! $REACTIVATE_FAILURE; then
    printf "\n${GREEN}[TEST SUM LR OVERALL] OK${NC}\n"
else
    printf "\n${RED}[TEST SUM LR OVERALL] FAIL${NC}\n"
    exit 1
fi
